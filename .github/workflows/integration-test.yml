name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - local
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - load
          - security

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: kong
          POSTGRES_PASSWORD: kongpass
          POSTGRES_DB: kong
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build API service
      working-directory: ./api-go-service
      run: |
        make deps
        make build

    - name: Start API service
      working-directory: ./api-go-service
      run: |
        ./server &
        sleep 5
        
        # Verify service is running
        curl -f http://localhost:8080/healthz || exit 1

    - name: Run API integration tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == null
      working-directory: ./test/integration
      run: |
        go test -v ./... -timeout 30s

    - name: Run endpoint tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == null
      run: |
        chmod +x ./scripts/test-endpoints.sh
        
        # Test direct API service (without Kong)
        API_BASE_URL="http://localhost:8080" ./scripts/test-endpoints.sh

    - name: Install load testing dependencies
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'load' || github.event.inputs.test_type == null
      run: |
        npm install -g k6

    - name: Run load tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'load' || github.event.inputs.test_type == null
      working-directory: ./test/load
      run: |
        k6 run load-test.js

    - name: Security tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' || github.event.inputs.test_type == null
      run: |
        # Test for common security issues
        echo "Running security tests..."
        
        # Test for health endpoint (should not require auth)
        curl -f http://localhost:8080/healthz || exit 1
        
        # Test for protected endpoints (should require auth)
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/api/v1/sum -d '{"numbers":[1,2]}' -H "Content-Type: application/json")
        if [ "$response" -eq 200 ]; then
          echo "ERROR: Protected endpoint accessible without authentication"
          exit 1
        fi
        
        echo "Security tests passed"

  kong-integration-tests:
    name: Kong Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == null
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: kong
          POSTGRES_PASSWORD: kongpass
          POSTGRES_DB: kong
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build API service
      working-directory: ./api-go-service
      run: |
        make deps
        make build

    - name: Start API service
      working-directory: ./api-go-service
      run: |
        ./server &
        sleep 3

    - name: Setup Kong
      run: |
        # Run Kong migrations
        docker run --rm --network host \
          -e "KONG_DATABASE=postgres" \
          -e "KONG_PG_HOST=localhost" \
          -e "KONG_PG_USER=kong" \
          -e "KONG_PG_PASSWORD=kongpass" \
          kong:3.4 kong migrations bootstrap
        
        # Start Kong
        docker run -d --name kong --network host \
          -e "KONG_DATABASE=postgres" \
          -e "KONG_PG_HOST=localhost" \
          -e "KONG_PG_USER=kong" \
          -e "KONG_PG_PASSWORD=kongpass" \
          -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" \
          -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" \
          -e "KONG_PROXY_ERROR_LOG=/dev/stderr" \
          -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" \
          -e "KONG_ADMIN_LISTEN=0.0.0.0:8001" \
          kong:3.4
        
        # Wait for Kong to be ready
        sleep 10
        curl -f http://localhost:8001/status || exit 1

    - name: Configure Kong services and routes
      run: |
        # Create service
        curl -i -X POST http://localhost:8001/services/ \
          --data 'name=zama-api-service' \
          --data 'url=http://localhost:8080'
        
        # Create route for health check (no auth)
        curl -i -X POST http://localhost:8001/services/zama-api-service/routes \
          --data 'paths[]=/healthz' \
          --data 'name=health-route'
        
        # Create route for API endpoints (with auth)
        curl -i -X POST http://localhost:8001/services/zama-api-service/routes \
          --data 'paths[]=/api' \
          --data 'name=api-route'
        
        # Create consumer
        curl -i -X POST http://localhost:8001/consumers/ \
          --data 'username=test-user'
        
        # Enable key-auth plugin on API route
        curl -i -X POST http://localhost:8001/routes/api-route/plugins \
          --data 'name=key-auth'
        
        # Create API key
        curl -i -X POST http://localhost:8001/consumers/test-user/key-auth \
          --data 'key=your-test-key'

    - name: Test Kong integration
      run: |
        # Test health endpoint (no auth required)
        curl -f http://localhost:8000/healthz || exit 1
        
        # Test protected endpoint with API key
        curl -f -H "${{ secrets.KONG_API_KEY }}" \
          -X POST http://localhost:8000/api/v1/sum \
          -H "Content-Type: application/json" \
          -d '{"numbers":[1,2,3]}' || exit 1
        
        # Test protected endpoint without API key (should fail)
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8000/api/v1/sum -d '{"numbers":[1,2]}' -H "Content-Type: application/json")
        if [ "$response" -ne 401 ]; then
          echo "ERROR: Protected endpoint should return 401 without API key, got $response"
          exit 1
        fi
        
        echo "Kong integration tests passed"

    - name: Cleanup
      if: always()
      run: |
        docker stop kong || true
        docker rm kong || true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'load' || github.event.inputs.test_type == null
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build and start API service
      working-directory: ./api-go-service
      run: |
        make deps
        make build
        ./server &
        sleep 3

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      working-directory: ./test/load
      run: |
        k6 run --summary-trend-stats="avg,min,med,max,p(95),p(99),count" load-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: test/load/results.json
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, kong-integration-tests, performance-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.kong-integration-tests.result }}" == "success" ]; then
          echo "✅ Kong Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Kong Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "✅ Performance Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
