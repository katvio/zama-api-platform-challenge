name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: eu-west-1

jobs:
  terraform-check:
    name: Terraform Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: |
        echo "🔍 Checking Terraform formatting..."
        set +e  # Disable exit on error for this step
        
        terraform fmt -check -recursive
        FORMAT_EXIT_CODE=$?
        
        if [ $FORMAT_EXIT_CODE -eq 0 ]; then
          echo "✅ All Terraform files are properly formatted"
        else
          echo "⚠️ Terraform formatting issues found but not blocking CI"
          echo "Please run 'terraform fmt -recursive' to fix formatting"
          echo ""
          echo "Files that need formatting:"
          terraform fmt -check -recursive 2>&1 || true
          echo ""
          echo "To fix: cd terraform && terraform fmt -recursive"
        fi
        
        set -e  # Re-enable exit on error

    - name: Terraform Validate (Modules)
      run: |
        echo "🔍 Validating Terraform modules..."
        set +e  # Disable exit on error
        
        for module in modules/*/; do
          echo "Validating module: $module"
          cd "$module"
          terraform init -backend=false
          terraform validate
          VALIDATE_EXIT_CODE=$?
          
          if [ $VALIDATE_EXIT_CODE -eq 0 ]; then
            echo "✅ Module $module validation passed"
          else
            echo "⚠️ Module $module validation failed but not blocking CI"
          fi
          cd - > /dev/null
        done
        
        set -e  # Re-enable exit on error

    - name: Terraform Validate (Environment)
      working-directory: terraform/environments/dev
      run: |
        echo "🔍 Validating Terraform environment configuration..."
        set +e  # Disable exit on error
        
        terraform init -backend=false
        terraform validate
        VALIDATE_EXIT_CODE=$?
        
        if [ $VALIDATE_EXIT_CODE -eq 0 ]; then
          echo "✅ Environment validation passed"
        else
          echo "⚠️ Environment validation failed but not blocking CI"
        fi
        
        set -e  # Re-enable exit on error

    - name: Run tfsec security scanner
      run: |
        # Install tfsec
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Run tfsec and save results
        ./tfsec terraform --format json --out tfsec-results.json || echo "⚠️ tfsec found security issues"
        ./tfsec terraform --format sarif --out tfsec-results.sarif || echo "⚠️ tfsec found security issues"

    - name: Upload tfsec results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: tfsec-security-results
        path: |
          tfsec-results.json
          tfsec-results.sarif
        retention-days: 30

    - name: Run Checkov security scanner
      run: |
        # Install Checkov
        pip install checkov
        
        # Run Checkov and save results
        checkov -d terraform --framework terraform --output json --output-file checkov-results.json || echo "⚠️ Checkov found security issues"
        checkov -d terraform --framework terraform --output sarif --output-file checkov-results.sarif || echo "⚠️ Checkov found security issues"

    - name: Upload Checkov results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: checkov-security-results
        path: |
          checkov-results.json
          checkov-results.sarif
        retention-days: 30

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    env:
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=zama-api-platform/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan failed"
          exit 1
        elif [ $exitcode -eq 2 ]; then
          echo "Terraform Plan has changes"
        else
          echo "Terraform Plan has no changes"
        fi

    - name: Save Terraform Plan
      if: steps.plan.outputs.exitcode == '2'
      run: |
        terraform show -no-color tfplan > plan.txt
        
        # Upload plan as artifact
        echo "Plan saved to plan.txt"

    - name: Upload Terraform Plan
      if: steps.plan.outputs.exitcode == '2'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}/plan.txt
        retention-days: 30

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == '2'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/environments/${{ github.event.inputs.environment || 'dev' }}/plan.txt', 'utf8');
          const output = `
          ## Terraform Plan Results for ${{ github.event.inputs.environment || 'dev' }}
          
          \`\`\`terraform
          ${plan}
          \`\`\`
          
          Plan: ${{ steps.plan.outputs.exitcode == '2' && 'Changes detected' || 'No changes' }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    
    environment: 
      name: terraform-${{ github.event.inputs.environment || 'dev' }}
      url: https://console.aws.amazon.com/
    
    env:
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=zama-api-platform/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Pre-Apply Validation
      run: |
        echo "🚨 TERRAFORM APPLY CONFIRMATION 🚨"
        echo "=================================="
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "=================================="
        echo ""
        echo "⚠️  This will apply infrastructure changes to AWS!"
        echo "⚠️  Make sure you have reviewed the Terraform plan!"
        echo ""
        
        # Show current plan if available
        if [ -f "tfplan" ]; then
          echo "Current plan summary:"
          terraform show -no-color tfplan | head -50
        else
          echo "No plan file found, generating fresh plan..."
          terraform plan -no-color | head -50
        fi

    - name: Terraform Apply
      run: |
        echo "🚀 Starting Terraform Apply..."
        terraform apply -auto-approve
        echo "✅ Terraform Apply completed successfully!"
        
        # Generate outputs for other jobs
        terraform output -json > terraform-outputs.json
        echo "📋 Terraform outputs saved"

    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}/terraform-outputs.json
        retention-days: 7

    - name: Generate Infrastructure Graph
      run: |
        terraform graph > terraform_graph.dot
        
        # Install graphviz and generate PNG (optional)
        sudo apt-get update && sudo apt-get install -y graphviz
        dot -Tpng terraform_graph.dot -o terraform_graph.png

    - name: Upload Infrastructure Graph
      uses: actions/upload-artifact@v4
      with:
        name: terraform-graph-${{ github.event.inputs.environment || 'dev' }}
        path: |
          terraform/environments/${{ github.event.inputs.environment || 'dev' }}/terraform_graph.dot
          terraform/environments/${{ github.event.inputs.environment || 'dev' }}/terraform_graph.png
        retention-days: 30

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment: 
      name: destroy-${{ github.event.inputs.environment || 'dev' }}
      url: https://console.aws.amazon.com/
    
    env:
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=zama-api-platform/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
