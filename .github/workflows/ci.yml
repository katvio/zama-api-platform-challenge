name: CI - Go API Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api-go-service/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api-go-service/**'
      - '.github/workflows/ci.yml'

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./api-go-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: api-go-service/go.sum

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Format check
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ö†Ô∏è Code formatting issues found but not blocking CI"
          echo "Please run 'make fmt' to fix formatting"
          git diff
        else
          echo "‚úÖ Code is properly formatted"
        fi

    - name: Vet
      run: make vet

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Lint
      run: |
        # Run golangci-lint with permissive settings
        golangci-lint run --timeout=5m \
          --disable-all \
          --enable=gofmt \
          --enable=goimports \
          --enable=govet \
          --enable=ineffassign \
          --enable=misspell \
          --skip-dirs=vendor \
          --skip-files=".*_test.go" \
          --max-issues-per-linter=50 \
          --max-same-issues=10 \
          || echo "‚ö†Ô∏è Linting issues found but not blocking CI"

    - name: Install gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2

    - name: Security scan
      run: |
        # Run gosec with permissive settings (don't fail CI on security issues)
        gosec -severity medium ./... || echo "‚ö†Ô∏è Security issues found but not blocking CI"

    - name: Run tests
      run: |
        echo "üß™ Running unit tests..."
        make test

    - name: Run tests with race detection
      run: |
        echo "üèÉ Running tests with race detection..."
        make test-race

    - name: Generate coverage report
      run: |
        echo "üìä Generating test coverage report..."
        make coverage
        
        # Display coverage summary
        echo "üìà Coverage Summary:"
        go tool cover -func=coverage.out | tail -1

    - name: Run benchmark tests
      run: |
        echo "‚ö° Running benchmark tests..."
        make bench || echo "‚ö†Ô∏è Benchmarks completed with warnings"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api-go-service/coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build application
      run: |
        echo "üî® Building application..."
        make build
        echo "‚úÖ Build completed successfully"

    - name: Test binary execution
      run: |
        timeout 5s ./server || [ $? -eq 124 ]
        echo "Binary starts successfully"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build and start API service
      working-directory: ./api-go-service
      run: |
        echo "üî® Building API service for integration tests..."
        make build
        echo "üöÄ Starting API service..."
        ./server &
        sleep 5
        echo "‚úÖ API service started"

    - name: Run integration tests
      run: |
        # Check if integration tests exist
        if [ -d "./test/integration" ]; then
          echo "Running integration tests..."
          cd ./test/integration
          go test -v ./... 2>/dev/null || echo "‚ö†Ô∏è Integration tests not available or failed - continuing"
        else
          echo "‚ÑπÔ∏è No integration tests directory found - skipping"
        fi

    - name: Test API endpoints
      run: |
        echo "üîç Testing API endpoints..."
        
        # Test health check (from README example)
        echo "Testing health endpoint..."
        curl -f http://localhost:8080/healthz || exit 1
        echo "‚úÖ Health endpoint working"
        
        # Test metrics endpoint (from README example)
        echo "Testing metrics endpoint..."
        curl -f http://localhost:8080/metrics || exit 1
        echo "‚úÖ Metrics endpoint working"
        
        # Test sum endpoint (from README example)
        echo "Testing sum calculation endpoint..."
        RESPONSE=$(curl -s -X POST http://localhost:8080/api/v1/sum \
          -H "Content-Type: application/json" \
          -d '{"numbers": [1.5, 2.5, 3.0]}')
        
        echo "Response: $RESPONSE"
        
        # Check if response contains expected sum (7.0)
        if echo "$RESPONSE" | grep -q '"sum":7'; then
          echo "‚úÖ Sum calculation working correctly"
        else
          echo "‚ùå Sum calculation failed"
          exit 1
        fi
        
        # Test API documentation endpoint (from README example)
        echo "Testing API documentation endpoint..."
        curl -f http://localhost:8080/api/v1/sum || exit 1
        echo "‚úÖ API documentation endpoint working"

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './api-go-service'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
