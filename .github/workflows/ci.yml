name: CI - Go API Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api-go-service/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api-go-service/**'
      - '.github/workflows/ci.yml'

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./api-go-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: api-go-service/go.sum

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Format check
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Vet
      run: make vet

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Lint
      run: golangci-lint run --timeout=5m

    - name: Install gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2

    - name: Security scan
      run: gosec ./...

    - name: Run tests
      run: make test

    - name: Run tests with race detection
      run: make test-race

    - name: Generate coverage report
      run: make coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api-go-service/coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build application
      run: make build

    - name: Test binary execution
      run: |
        timeout 5s ./server || [ $? -eq 124 ]
        echo "Binary starts successfully"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build and start API service
      working-directory: ./api-go-service
      run: |
        make build
        ./server &
        sleep 3

    - name: Run integration tests
      working-directory: ./test/integration
      run: |
        go test -v ./...

    - name: Test health endpoint
      run: |
        curl -f http://localhost:8080/healthz || exit 1
        curl -f http://localhost:8080/metrics || exit 1

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './api-go-service'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
